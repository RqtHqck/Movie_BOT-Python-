# AIOGRAM======================================================================================
from aiogram import Bot, Dispatcher, executor, types
from config import token_API
# Keyboards
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
# Imported IKB
from ikb import ikb_make

# LAST YEAR====================================================================================
from kinogo_last_year_f import find_5films_lastyear
from kinogo_last_year_s import find_5serials_lastyear
from kinogo_recom_film import recommend_film
import time
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

# RANDOM=======================================================================================
import random

bot = Bot(token=token_API)
dp = Dispatcher(bot)

help_text = '<b>/start</b> - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n' + '<em>–ö–æ–º–∞–Ω–¥—ã –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞\n</em>' + "<b>–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –Ω–æ–≤–∏–Ω–∫—É</b> - –ü–æ–ø—Ä–æ—Å–∏—Ç—å –±–æ—Ç–∞ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –Ω–æ–≤—ã—Ö —Ñ–∏–ª—å–º–æ–≤\n" + "<b>–§–∏–ª—å–º—ã –∑–∞ –≥–æ–¥</b> - –§–∏–ª—å–º—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥\n" + "<b>–°–µ—Ä–∏–∞–ª—ã –∑–∞ –≥–æ–¥</b> - –°–µ—Ä–∏–∞–ª—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥\n" + '<b>–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç</b> - –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç Kinogo'


async def on_startup(_):
    # –ì–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω
    print('Bot is polling')


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer(
        text='–ü—Ä–∏–≤–µ—Çüëã. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ. –£—á—Ç–∏—Ç–µ, —á—Ç–æ –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∞–π—Ç <b>kinogo</b> –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –í–∞—Å. ' +
             '–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ –∫–æ–º–∞–Ω–¥–∞—Ö —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /help. –°—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç <b>kinogo</b>–í—ã —Ç–æ–∂–µ –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Ç–∞–º.',
        reply_markup=ikb_make(),
        parse_mode='HTML')


@dp.message_handler(commands=['help'])
async def cmd_help(message: types.Message):
    await message.answer(
        text=help_text,
        parse_mode='HTML')


@dp.callback_query_handler()
async def buttons(callback: types.CallbackQuery):
    if callback.data == 'Recommend':
        recommeded_film = recommend_film()
        keys = (list(recommeded_film.keys()))
        for key in keys:
            name = key
            country = recommeded_film[key][0]
            link = recommeded_film[key][1]
            description = recommeded_film[key][2]
            photo = recommeded_film[key][3]

            await bot.send_photo(chat_id=callback.from_user.id,
                                 photo=photo,
                                 caption=f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name},\n<b>–°—Ç—Ä–∞–Ω–∞:</b> {country},\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n<b>–°—Å—ã–ª–∫–∞:</b> {link}',
                                 parse_mode='HTML')
            await callback.message.answer(text='–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!üòä')

    elif callback.data == 'Year_f':
        last_year_films_dict = find_5films_lastyear()

        keys = (list(last_year_films_dict.keys()))
        print(len(keys))
        random_keys = random.sample(keys, 3)
        print(random_keys)
        for key in random_keys:
            name = key
            country = last_year_films_dict[key][0]
            link = last_year_films_dict[key][1]
            description = last_year_films_dict[key][2]
            photo = last_year_films_dict[key][3]

            await bot.send_photo(chat_id=callback.from_user.id,
                                 photo=photo,
                                 caption=f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name},\n<b>–°—Ç—Ä–∞–Ω–∞:</b> {country},\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n<b>–°—Å—ã–ª–∫–∞:</b> {link}',
                                 parse_mode='HTML')
            await callback.message.answer(text='–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!üòä')

    elif callback.data == 'Year_s':
        last_year_serials_dict = find_5serials_lastyear()

        keys = (list(last_year_serials_dict.keys()))
        print(len(keys))
        random_keys = random.sample(keys, 3)
        print(random_keys)
        for key in random_keys:
            name = key
            country = last_year_serials_dict[key][0]
            link = last_year_serials_dict[key][1]
            description = last_year_serials_dict[key][2]
            photo = last_year_serials_dict[key][3]

            await bot.send_photo(chat_id=callback.from_user.id,
                                 photo=photo,
                                 caption=f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name},\n<b>–°—Ç—Ä–∞–Ω–∞:</b> {country},\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n<b>–°—Å—ã–ª–∫–∞:</b> {link}',
                                 parse_mode='HTML')
            await callback.message.answer(text='–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!üòä')

    elif callback.data == 'link':
        await callback.message.answer(text='–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç kinogo https://kinogo.biz,\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!üòÅ')


@dp.message_handler()
async def all_messages(message):
    await message.answer(
        text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–∫—É—é-–ª–∏–±–æ –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö, –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ /help, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫.')


if __name__ == '__main__':
    executor.start_polling(dispatcher=dp, on_startup=on_startup, skip_updates=True)
